name: Build-Static-Win64-and-Linux-AppImage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_BINARY_SOURCES: "clear;files,C:\\Users\\runneradmin\\AppData\\Local\\vcpkg\\archives,readwrite"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache vcpkg installed packages and archive
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: vcpkg-windows-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg
        shell: bash
        run: |
          if [ ! -f "vcpkg/bootstrap-vcpkg.bat" ]; then
            rm -rf vcpkg
            git clone https://github.com/microsoft/vcpkg.git
          fi
          ./vcpkg/bootstrap-vcpkg.bat

      - name: Install dependencies and configure CMake
        run: |
          .\vcpkg\vcpkg.exe install `
            --triplet x64-windows-static-release `
            --overlay-triplets=cmake/triplets
          cmake -B build_vs_64 -S . -DCMAKE_BUILD_TYPE=Release `
                -DENABLE_LTO=ON `
                -DVCPKG_TARGET_TRIPLET="x64-windows-static-release" `
                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
                -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /GL /Oy" `
                -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake

      - name: Build
        run: cmake --build build_vs_64 --config Release --parallel

      # Delete the old cache on hit to emulate a cache update.
      - name: Delete old cache
        continue-on-error: true
        run: gh cache delete --repo ${{ github.repository }} ${{ env.CACHE_KEY }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: vcpkg-windows-${{ hashFiles('vcpkg.json') }}

      - name: Save new cache
        uses: actions/cache/save@v4
        env:
          CACHE_KEY: vcpkg-windows-${{ hashFiles('vcpkg.json') }}
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: ${{ env.CACHE_KEY }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: inter-doom-dev-win64
          path: build_vs_64/src/Release/*.exe
          retention-days: 90

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        game: [doom, heretic, hexen]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore vcpkg binary cache
        uses: actions/cache@v4
        with:
          path: vcpkg_cache
          key: vcpkg-linux-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-linux-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ pkg-config git

      - name: Clone vcpkg
        run: git clone https://github.com/microsoft/vcpkg.git

      - name: Bootstrap vcpkg
        run: ./bootstrap-vcpkg.sh
        working-directory: ./vcpkg

      - name: Install vcpkg dependencies
        run: ./vcpkg/vcpkg install --binarysource="files,${{ github.workspace }}/vcpkg_cache,readwrite"
        env:
          VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite

      - name: Install linuxdeploy and plugin
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage

      - name: Build the project
        run: |
          cmake -B build_linux -S . -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -D CMAKE_C_FLAGS_RELEASE="-O3 -march=x86-64-v2 -mtune=generic -flto -fno-math-errno -fomit-frame-pointer -funroll-loops -DNDEBUG"
          cmake --build build_linux --config Release
        env:
          VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite

      # Delete the old cache on hit to emulate a cache update.
      - name: Delete old cache
        continue-on-error: true
        run: gh cache delete --repo ${{ github.repository }} ${{ env.CACHE_KEY }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: vcpkg-linux-${{ hashFiles('vcpkg.json') }}

      - name: Save new cache
        uses: actions/cache/save@v4
        env:
          CACHE_KEY: vcpkg-linux-${{ hashFiles('vcpkg.json') }}
        with:
          path: vcpkg_cache
          key: ${{ env.CACHE_KEY }}

      - name: Add desktop file and icon
        run: |
          mkdir -p appdir/usr/share/applications
          cp data/${{ matrix.game }}.desktop appdir/usr/share/applications/inter-${{ matrix.game }}.desktop
          mkdir -p appdir/usr/share/icons/hicolor/128x128/apps
          cp data/${{ matrix.game }}.png appdir/usr/share/icons/hicolor/128x128/apps/inter-${{ matrix.game }}.png

      - name: Add executable to AppDir
        run: |
          mkdir -p appdir/usr/bin
          cp build_linux/src/inter-${{ matrix.game }} appdir/usr/bin/

      - name: Package as AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir=appdir --output appimage

      - name: Clean up unnecessary files
        run: |
          rm -f linuxdeploy*.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: inter-${{ matrix.game }}-dev-linux64
          path: "**/*.AppImage"
          retention-days: 90
