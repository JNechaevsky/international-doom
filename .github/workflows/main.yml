# ðŸŒ¿ We aim to reduce the usage footprint of GitHub Actions by caching dependencies,
# optimizing build processes, and cleaning up stale artifacts.
# Efficiency is not just about speed â€” it's also about responsible use
# of cloud computing resources and reducing unnecessary energy consumption.
#
# â€” Polina "Aura" N. and Julia Nechaevskaya


name: Build Windows and Linux

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg_cache,readwrite"

jobs:
  windows_64bit:
    name: Windows (64-bit)
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache vcpkg installed packages and archive
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-windows-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg
        shell: bash
        run: |
          if [ ! -f "vcpkg/bootstrap-vcpkg.bat" ]; then
            rm -rf vcpkg
            git clone https://github.com/microsoft/vcpkg.git
          fi
          ./vcpkg/bootstrap-vcpkg.bat

      - name: Install dependencies and configure CMake
        run: |
          .\vcpkg\vcpkg.exe install `
            --triplet x64-windows-static-release `
            --overlay-triplets=cmake/triplets
          cmake -B build_vs_64 -S . -DCMAKE_BUILD_TYPE=Release `
                -DENABLE_LTO=ON `
                -DVCPKG_TARGET_TRIPLET="x64-windows-static-release" `
                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
                -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /GL /Oy" `
                -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake

      - name: Build
        run: cmake --build build_vs_64 --config Release --parallel

      # Delete the old cache on hit to emulate a cache update.
      - name: Delete old cache
        continue-on-error: true
        run: gh cache delete --repo ${{ github.repository }} ${{ env.CACHE_KEY }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: vcpkg-windows-${{ hashFiles('vcpkg.json') }}

      - name: Save new cache
        uses: actions/cache/save@v4
        env:
          CACHE_KEY: vcpkg-windows-${{ hashFiles('vcpkg.json') }}
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: ${{ env.CACHE_KEY }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: inter-doom-dev-win64
          path: build_vs_64/src/Release/*.exe
          retention-days: 90

  windows_32bit:
    name: Windows (32-bit)
    runs-on: windows-2022
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Visual Studio 2019 Build Tools with v141_xp
        run: |
          choco install visualstudio2019buildtools --package-parameters "
            --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
            --add Microsoft.Component.VC.Runtime.UCRTSDK
            --add Microsoft.VisualStudio.Component.WinXP
            --add Microsoft.VisualStudio.Component.VC.v141.x86.x64
            --includeRecommended --includeOptional" -y

      - name: Configure CMake (XP target)
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x86
          cmake -B build_vs_32 ^
            -G "Visual Studio 16 2019" ^
            -T v141_xp ^
            -A Win32 ^
            -DCMAKE_BUILD_TYPE="Release" ^
            -DSDL2_DIR="win32/SDL2-2.32.8" ^
            -DSDL2_MIXER_DIR="win32/SDL2_mixer-2.8.1" ^
            -DSDL2_NET_DIR="win32/SDL2_net-2.2.0" ^
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=Off ^
            -DSAMPLERATE_DIR="win32/libsamplerate-0.2.2-win32 ^
            -DFluidSynth_DIR="win32/fluidsynth-2.4.2-winXP-x86" 

      - name: Build
        run: cmake --build build_vs_32 --config Release --parallel

      - name: Prepare binaries for packaging
        run: |
          mkdir upload
          copy build_vs_32/src/Release/*.exe upload
          copy win32/dlls-vc-win-32/*.dll upload

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: inter-doom-dev-win32
          path: upload/*
          retention-days: 90

  linux_64bit:
    name: Linux AppImage (64-bit)
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore vcpkg binary cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-linux-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-linux-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ pkg-config git

      - name: Clone vcpkg
        run: git clone https://github.com/microsoft/vcpkg.git

      - name: Bootstrap vcpkg
        run: ./bootstrap-vcpkg.sh
        working-directory: ./vcpkg

      - name: Install vcpkg dependencies
        run: ./vcpkg/vcpkg install --binarysource="files,${{ github.workspace }}/vcpkg_cache,readwrite"

      - name: Install linuxdeploy and plugin
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage

      - name: Build the project
        run: |
          cmake -B build_linux -S . -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -D CMAKE_C_FLAGS_RELEASE="-O3 -march=x86-64-v2 -mtune=generic -flto -fno-math-errno -fomit-frame-pointer -funroll-loops -DNDEBUG"
          cmake --build build_linux --config Release

      # Delete the old cache on hit to emulate a cache update.
      - name: Delete old cache
        continue-on-error: true
        run: gh cache delete --repo ${{ github.repository }} ${{ env.CACHE_KEY }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: vcpkg-linux-${{ hashFiles('vcpkg.json') }}

      - name: Save new cache
        uses: actions/cache/save@v4
        env:
          CACHE_KEY: vcpkg-linux-${{ hashFiles('vcpkg.json') }}
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: ${{ env.CACHE_KEY }}

      - name: Prepare AppDir for Doom
        run: |
          mkdir -p appdir-doom/usr/bin
          cp build_linux/src/inter-doom appdir-doom/usr/bin/
          mkdir -p appdir-doom/usr/share/applications
          cp data/doom.desktop appdir-doom/usr/share/applications/inter-doom.desktop
          mkdir -p appdir-doom/usr/share/icons/hicolor/128x128/apps
          cp data/doom.png appdir-doom/usr/share/icons/hicolor/128x128/apps/inter-doom.png
      
      - name: Package Doom as AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir=appdir-doom --output appimage
      
      - name: Prepare AppDir for Heretic
        run: |
          mkdir -p appdir-heretic/usr/bin
          cp build_linux/src/inter-heretic appdir-heretic/usr/bin/
          mkdir -p appdir-heretic/usr/share/applications
          cp data/heretic.desktop appdir-heretic/usr/share/applications/inter-heretic.desktop
          mkdir -p appdir-heretic/usr/share/icons/hicolor/128x128/apps
          cp data/heretic.png appdir-heretic/usr/share/icons/hicolor/128x128/apps/inter-heretic.png
      
      - name: Package Heretic as AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir=appdir-heretic --output appimage

      - name: Prepare AppDir for Hexen
        run: |
          mkdir -p appdir-hexen/usr/bin
          cp build_linux/src/inter-hexen appdir-hexen/usr/bin/
          mkdir -p appdir-hexen/usr/share/applications
          cp data/hexen.desktop appdir-hexen/usr/share/applications/inter-hexen.desktop
          mkdir -p appdir-hexen/usr/share/icons/hicolor/128x128/apps
          cp data/hexen.png appdir-hexen/usr/share/icons/hicolor/128x128/apps/inter-hexen.png
      
      - name: Package Hexen as AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir=appdir-hexen --output appimage

      - name: Clean up unnecessary files
        run: |
          rm -f linuxdeploy*.AppImage

      - name: Upload Doom AppImage
        uses: actions/upload-artifact@v4
        with:
          name: inter-doom-dev-linux64
          path: inter-doom-x86_64.AppImage
          retention-days: 90
      
      - name: Upload Heretic AppImage
        uses: actions/upload-artifact@v4
        with:
          name: inter-heretic-dev-linux64
          path: inter-heretic-x86_64.AppImage
          retention-days: 90

      - name: Upload Hexen AppImage
        uses: actions/upload-artifact@v4
        with:
          name: inter-hexen-dev-linux64
          path: inter-hexen-x86_64.AppImage
          retention-days: 90
